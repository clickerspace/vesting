#include "imports/stdlib.fc";
#include "imports/utils.fc";

{-
  Storage
  storage#_ owner_address:MsgAddressInt extra_data_cell:^Cell = Storage;
  extra_data_cell#_ vesting_wallet_code:^Cell logger_address:MsgAddressInt total_wallets_created:uint64 total_royalty_collected:Coins royalty_fee:Coins = ExtraData;
-}

;; Load data from storage
(slice, cell, slice, int, int, int) load_data() inline {
    var ds = get_data().begin_parse();
    ;; if ds is empty, return default values
    if (ds.slice_empty?()) {
        return (null(), null(), null(), 0, 0, DEFAULT_ROYALTY_FEE);
    }
    
    slice owner_address = ds~load_msg_addr(); ;; owner address
    
    cell extra_data_cell = ds~load_ref(); ;; extra data cell
    slice extra_data = extra_data_cell.begin_parse(); ;; extra data
    
    cell vesting_wallet_code = extra_data~load_ref(); ;; vesting wallet code
    slice logger_address = extra_data~load_msg_addr(); ;; logger address
    int total_wallets_created = extra_data~load_uint(64); ;; total wallets created
    int total_royalty_collected = extra_data~load_coins(); ;; total royalty collected
    int royalty_fee = extra_data~load_coins(); ;; royalty fee
    
    return (owner_address, vesting_wallet_code, logger_address, total_wallets_created, total_royalty_collected, royalty_fee);
}

;; Save data to storage
() save_data(slice owner_address, cell vesting_wallet_code, slice logger_address, int total_wallets_created, 
    int total_royalty_collected, int royalty_fee) impure inline {
    
    ;; Create extra data cell
    cell extra_data = begin_cell()
        .store_ref(vesting_wallet_code) ;; vesting wallet code
        .store_slice(logger_address) ;; logger address
        .store_uint(total_wallets_created, 64) ;; total wallets created
        .store_coins(total_royalty_collected) ;; total royalty collected
        .store_coins(royalty_fee) ;; royalty fee
        .end_cell();
    
    ;; Save data to storage
    set_data(begin_cell()
        .store_slice(owner_address) ;; owner address
        .store_ref(extra_data) ;; extra data
        .end_cell());
}

;; Calculate vesting wallet address from owner, params, and state init
slice calculate_vesting_wallet_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

;; Create vesting wallet state init
cell create_vesting_wallet_state_init(slice owner_address, slice recipient_address, slice jetton_master_address, 
    int vesting_total_amount, int vesting_params, int is_auto_claim, 
    int cancel_permission, int change_recipient_permission, cell wallet_code, slice logger_address, slice my_address) inline {

    ;; Create data1 cell (256 bits)
    cell data1 = begin_cell()
        .store_slice(owner_address) ;; owner address (256 bits)
        .end_cell();
    
    ;; Create data2 cell (256 bits + 256 bits = 512 bits)
    cell data2 = begin_cell()
        .store_slice(recipient_address) ;; recipient address (256 bits)
        .store_slice(jetton_master_address) ;; jetton master address (256 bits)
        .end_cell();
    
    ;; Create data3 cell (128 bits + 1 bit + 3 bits + 3 bits = 135 bits)
    cell data3 = begin_cell()
        .store_coins(vesting_total_amount) ;; vesting total amount (128 bits)
        .store_uint(vesting_params, 128) ;; vesting params (128 bits)
        .store_uint(is_auto_claim, 1) ;; is auto claim (1 bit)
        .store_uint(cancel_permission, 3) ;; cancel permission (3 bits)
        .store_uint(change_recipient_permission, 3) ;; change recipient permission (3 bits)
        .end_cell();
    
    ;; Create data4 cell (128 bits + 32 bits + 256 bits + 256 bits + 8 bits + 8 bits = 736 bits)
    cell data4 = begin_cell()
        .store_coins(0) ;;claimed amount (128 bits)
        .store_uint(0, 32) ;; seqno (32 bits)
        .store_slice(logger_address) ;; logger address (256 bits)
        .store_slice(my_address) ;; my address (256 bits)
        .store_uint(0, 8) ;; splits_count (8 bits)
        .store_uint(vesting::max_split_amount, 8) ;; max_splits (8 bits)
        .end_cell();
    
    ;; A cell can store up to 4 references
    cell combined_data = begin_cell()
        .store_ref(data1) ;; data1 (256 bits)
        .store_ref(data2) ;; data2 (512 bits)
        .store_ref(data3) ;; data3 (135 bits)
        .store_ref(data4) ;; data4 (736 bits)
        .end_cell();
    
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(wallet_code) ;; wallet code
        .store_dict(combined_data) ;; combined data
        .store_uint(0, 1)
        .end_cell();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return (); ;; Accept TON transfers
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return (); ;; Ignore bounced messages
    }
    
    slice sender_addr = cs~load_msg_addr();
    slice my_address = my_address();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    var (owner_address, vesting_wallet_code, logger_address, total_wallets_created, total_royalty_collected, royalty_fee) = load_data();

    ;; Transfer notification - Create vesting wallet
    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        ;; Check if sender has enough balance
        throw_unless(error::insufficient_fee, msg_value >= royalty_fee);

        slice forward_payload = in_msg_body~load_ref().begin_parse();

        ;; don't create vesting wallet if ref is null
        if(forward_payload.slice_empty?()) {
            return ();
        }

        slice forward_payload1 = forward_payload~load_ref().begin_parse();
        slice forward_payload2 = forward_payload~load_ref().begin_parse();

        slice vesting_owner = forward_payload1~load_msg_addr();
        slice vesting_recipient = forward_payload1~load_msg_addr();

        slice jetton_master = forward_payload2~load_msg_addr();
        slice jetton_wallet_address = forward_payload2~load_msg_addr();
        int vesting_start_time = forward_payload2~load_uint(32);
        int vesting_total_duration = forward_payload2~load_uint(32);
        int unlock_period = forward_payload2~load_uint(32);
        int cliff_duration = forward_payload2~load_uint(32);
        int is_auto_claim = forward_payload2~load_uint(1);
        int cancel_contract_permission = forward_payload2~load_uint(3);
        int change_recipient_permission = forward_payload2~load_uint(3);
    
        int packed_params = (vesting_start_time << 96) | 
        (vesting_total_duration << 64) | 
        (unlock_period << 32) | cliff_duration;

        cell state_init = create_vesting_wallet_state_init(
            vesting_owner,
            vesting_recipient, 
            jetton_master,
            jetton_amount,
            packed_params,
            is_auto_claim,
            cancel_contract_permission,
            change_recipient_permission,
            vesting_wallet_code,
            logger_address,
            my_address
        );
        
        slice vesting_wallet_address = calculate_vesting_wallet_address(state_init);
        
        ;; Deploy vesting wallet
        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(vesting_wallet_address)
            .store_coins(gas::deploy_vesting_wallet)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(begin_cell().end_cell());
        
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        
        ;; Send jetton to vesting wallet
        var msg_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(vesting_wallet_address)
            .store_slice(vesting_owner)
            .store_uint(0, 1)
            .store_coins(gas::jetton_transfer_wallet)
            .store_uint(0, 1)
            .end_cell();

        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(royalty_fee + gas::jetton_transfer_master)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);
        
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);

        ;; Logger
        if ((~ null?(logger_address)) & (logger_address.preload_uint(2) != 0)) {
            var log_msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(logger_address)
            .store_coins(gas::logger_message)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::register_wallet, 32)
            .store_uint(query_id, 64);
            
            cell log_data = begin_cell()
                .store_slice(vesting_wallet_address)
                .store_slice(jetton_master)
                .end_cell();
                
            cell log_data2 = begin_cell()
                .store_slice(vesting_owner)
                .store_slice(vesting_recipient)
                .store_uint(is_auto_claim, 1)
                .end_cell();
                
            log_msg = log_msg.store_ref(log_data).store_ref(log_data2);
            
            send_raw_message(log_msg.end_cell(), send_mode::pay_gas_separately);
        }

        save_data(
            owner_address, 
            vesting_wallet_code,
            logger_address,
            total_wallets_created + 1, 
            total_royalty_collected + royalty_fee,
            royalty_fee
        );
        
        return ();
    }

    ;; Set logger address (only owner)
    if (op == op::set_logger_address) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        slice new_logger = in_msg_body~load_msg_addr();
        save_data(owner_address, vesting_wallet_code, new_logger, total_wallets_created, total_royalty_collected, royalty_fee);
        return ();
    }

    ;; Update vesting wallet code (only owner)
    if (op == op::update_vesting_wallet_code) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        cell new_code = in_msg_body~load_ref();
        save_data(owner_address, new_code, logger_address, total_wallets_created, total_royalty_collected, royalty_fee);
        return ();
    }

    ;; Change owner (only owner)
    if (op == op::change_owner) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, vesting_wallet_code, logger_address, total_wallets_created, total_royalty_collected, royalty_fee);
        return ();
    }

    ;; Set royalty fee (only owner)
    if (op == op::set_royalty_fee) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        int new_royalty_fee = in_msg_body~load_coins();

        save_data(owner_address, vesting_wallet_code, logger_address, total_wallets_created, total_royalty_collected, new_royalty_fee);
        return ();
    }

    ;; Withdraw excess TON (only owner)
    if (op == op::withdraw_tons) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(error::insufficient_balance, balance >= withdraw_amount);
        int return_value = min(withdraw_amount, balance - min_tons_for_storage);

        var msg = begin_cell()
                .store_uint(NON_BOUNCEABLE, 6)
                .store_slice(owner_address)
                .store_coins(return_value)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
                
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        return ();
    }

    ;; Withdraw jettons (only owner, emergency)
    if (op == op::withdraw_jettons) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
    
        int jetton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();
    
        var msg_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(sender_addr)
            .store_slice(sender_addr)
            .store_uint(0, 1)
            .store_coins(forward_ton_amount)
            .store_uint(0, 1)
            .end_cell();
            
        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(forward_ton_amount + gas::jetton_transfer_master)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);
        
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        return ();
    }
    
    throw(error::invalid_op);
}

;; Get methods

;; Returns current royalty fee
int get_royalty_fee() method_id {
    var (_, _, _, _, _, royalty_fee) = load_data();
    return royalty_fee;
}

;; Returns contract owner
slice get_owner() method_id {
    var (owner_address, _, _, _, _, _) = load_data();
    return owner_address;
}

;; Returns vesting wallet code
cell get_wallet_code() method_id {
    var (_, vesting_wallet_code, _, _, _, _) = load_data();
    return vesting_wallet_code;
}

;; Returns stats
(int, int) get_vesting_stats() method_id {
    var (_, _, _, total_wallets_created, total_royalty_collected, _) = load_data();
    return (total_wallets_created, total_royalty_collected);
}

;; Returns vesting wallet address
slice get_wallet_address(slice owner_address, slice recipient_address, slice jetton_master_address, 
    int vesting_total_amount, int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, int is_auto_claim, 
    int cancel_contract_permission, int change_recipient_permission) method_id {
    
    var (_, vesting_wallet_code, logger_address, _, _, _) = load_data();
    slice my_addr = my_address();
    
    if (cell_null?(vesting_wallet_code)) {
        return null_addr();
    }
    
    int packed_params = (vesting_start_time << 96) | 
    (vesting_total_duration << 64) | 
    (unlock_period << 32) | 
                       cliff_duration;
    
    cell state_init = create_vesting_wallet_state_init(
        owner_address,
        recipient_address,
        jetton_master_address,
        vesting_total_amount,
        packed_params,
        is_auto_claim,
        cancel_contract_permission,
        change_recipient_permission,
        vesting_wallet_code,
        logger_address,
        my_addr
    );
    
    return calculate_vesting_wallet_address(state_init);
}

;; Returns logger address
slice get_logger_address() method_id {
    var (_, _, logger_address, _, _, _) = load_data();
    return logger_address;
}
