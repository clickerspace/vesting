#include "imports/stdlib.fc";
#include "imports/utils.fc";

{-
  Storage
  storage#_ owner:MsgAddressInt token_wallets:^(HashmapE 256 (^(HashmapE 256 MsgAddressInt))) 
             owner_wallets:^(HashmapE 256 (^(HashmapE 256 MsgAddressInt))) 
             receiver_wallets:^(HashmapE 256 (^(HashmapE 256 MsgAddressInt))) 
             counts_and_auto_claim:^Cell = Storage;
  
  counts_and_auto_claim#_ auto_claim_wallets:^(HashmapE 256 MsgAddressInt) 
                          total_wallet_count:uint32 max_wallet_count:uint32 = AutoClaimData;
-}

;; Global Variables
global slice storage::owner; ;; owner address
global cell storage::token_wallets; ;; token -> wallets
global cell storage::owner_wallets; ;; owner -> wallets
global cell storage::receiver_wallets; ;; receiver -> wallets
global cell storage::auto_claim_wallets; ;; auto claim wallets
global int storage::total_wallet_count; ;; total wallets
global int storage::max_wallet_count; ;; max wallets

global int storage::init?;

;; Load data from storage
() load_data() impure inline {
    slice ds = get_data().begin_parse();
    
    if (ds.slice_bits() == 0) {
        storage::owner = null();
        storage::token_wallets = new_dict();
        storage::owner_wallets = new_dict();
        storage::receiver_wallets = new_dict();
        storage::auto_claim_wallets = new_dict();
        storage::total_wallet_count = 0;
        storage::max_wallet_count = 2000; ;; default max wallets
        storage::init? = false;
        return ();
    }
    
    storage::owner = ds~load_msg_addr();
    storage::init? = true;
    
    if (ds.slice_refs() < 1) {
        storage::token_wallets = new_dict();
        storage::owner_wallets = new_dict();
        storage::receiver_wallets = new_dict();
        storage::auto_claim_wallets = new_dict();
        storage::total_wallet_count = 0;
        storage::max_wallet_count = 2000;
        return ();
    }
    
    storage::token_wallets = ds~load_dict();
    
    if (ds.slice_refs() < 1) {
        storage::owner_wallets = new_dict();
        storage::receiver_wallets = new_dict();
        storage::auto_claim_wallets = new_dict();
        storage::total_wallet_count = 0;
        storage::max_wallet_count = 2000;
        return ();
    }
    
    storage::owner_wallets = ds~load_dict();
    
    if (ds.slice_refs() < 1) {
        storage::receiver_wallets = new_dict();
        storage::auto_claim_wallets = new_dict();
        storage::total_wallet_count = 0;
        storage::max_wallet_count = 2000;
        return ();
    }
    
    storage::receiver_wallets = ds~load_dict();
    
    if (ds.slice_refs() < 1) {
        storage::auto_claim_wallets = new_dict();
        storage::total_wallet_count = 0;
        storage::max_wallet_count = 2000;
        return ();
    }
    
    ;; Load the combined cell with auto_claim_wallets and counts
    cell counts_and_auto_claim = ds~load_ref();
    slice auto_claim_counts = counts_and_auto_claim.begin_parse();
    
    storage::auto_claim_wallets = auto_claim_counts~load_dict();
    storage::total_wallet_count = auto_claim_counts~load_uint(32);
    storage::max_wallet_count = auto_claim_counts~load_uint(32);
}

;; Save data to storage
() save_data() impure inline {
    cell counts_and_auto_claim = begin_cell()
        .store_dict(storage::auto_claim_wallets)
        .store_uint(storage::total_wallet_count, 32)
        .store_uint(storage::max_wallet_count, 32)
        .end_cell();
    
    set_data(begin_cell()
        .store_slice(storage::owner)
        .store_dict(storage::token_wallets)
        .store_dict(storage::owner_wallets)
        .store_dict(storage::receiver_wallets)
        .store_ref(counts_and_auto_claim)
        .end_cell());
}

;; Add wallet to a address index
cell add_to_index(cell index_dict, slice key_address, slice wallet_address) inline {
    ;; Parse addresses
    (int key_wc, int key_hash) = parse_std_addr(key_address);
    (int wallet_wc, int wallet_hash) = parse_std_addr(wallet_address);
    
    ;; Use hash part as dictionary key
    (slice value_slice, int found) = index_dict.udict_get?(256, key_hash);
    cell inner_dict = found ? value_slice.preload_ref() : new_dict();
    
    ;; Store full address slice as a value
    builder wallet_builder = begin_cell().store_slice(wallet_address);
    inner_dict~udict_set_ref(256, wallet_hash, wallet_builder.end_cell());
    
    ;; Update outer dictionary
    return index_dict.udict_set_ref(256, key_hash, inner_dict);
}

;; Remove wallet from a specific index
cell remove_from_index(cell index_dict, slice key_address, slice wallet_address) inline {
    ;; Parse addresses
    (int key_wc, int key_hash) = parse_std_addr(key_address);
    (int wallet_wc, int wallet_hash) = parse_std_addr(wallet_address);
    
    ;; Get inner dictionary
    (slice value_slice, int found) = index_dict.udict_get?(256, key_hash);
    
    if (found) {
        cell inner_dict = value_slice.preload_ref();
        
        ;; Remove wallet from inner dictionary
        (inner_dict, int was_found) = inner_dict.udict_delete?(256, wallet_hash);
        
        ;; Check if inner dictionary is empty
        int dict_empty = dict_empty?(inner_dict);
        
        if (dict_empty) {
            ;; If inner dictionary is empty, remove the key from outer dictionary
            (cell new_dict, int deleted) = index_dict.udict_delete?(256, key_hash);
            return new_dict;
        } else {
            ;; Update outer dictionary with modified inner dictionary
            return index_dict.udict_set_ref(256, key_hash, inner_dict);
        }
    }
    
    return index_dict;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return (); ;; Accept TON transfers
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return (); ;; Ignore bounced messages
    }
    
    slice sender_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    ;; Load data into global variables
    load_data();
    
    ;; register_wallet - register a new vesting wallet (from vesting master contract transfer_notification)
    if (op == op::register_wallet) {
        slice wallet_address = null();
        slice token_address = null();
        slice wallet_owner_address = null();
        slice receiver_address = null();
        int is_auto_claim = 0;
  
        cell log_data = in_msg_body~load_ref();
        slice log_data_cs = log_data.begin_parse();
            
        wallet_address = log_data_cs~load_msg_addr();
        token_address = log_data_cs~load_msg_addr();
            
        cell log_data2 = in_msg_body~load_ref();
        slice log_data2_cs = log_data2.begin_parse();
            
        wallet_owner_address = log_data2_cs~load_msg_addr();
        receiver_address = log_data2_cs~load_msg_addr();
        is_auto_claim = log_data2_cs~load_uint(1);
            
        throw_unless(error::invalid_data, ~ null?(wallet_address));
        throw_unless(error::invalid_data, ~ null?(token_address));
        throw_unless(error::invalid_data, ~ null?(wallet_owner_address));
        throw_unless(error::invalid_data, ~ null?(receiver_address));

        ;; Check if max wallets are reached
        throw_unless(error::max_wallets_reached, storage::total_wallet_count < storage::max_wallet_count);
        
        ;; Update token -> wallets mapping
        storage::token_wallets = add_to_index(storage::token_wallets, token_address, wallet_address);
        
        ;; Update owner -> wallets mapping
        storage::owner_wallets = add_to_index(storage::owner_wallets, wallet_owner_address, wallet_address);
        
        ;; Update receiver -> wallets mapping
        storage::receiver_wallets = add_to_index(storage::receiver_wallets, receiver_address, wallet_address);
        
        ;; Update auto claim list
        if (is_auto_claim == 1) {
            (int wallet_wc, int wallet_hash) = parse_std_addr(wallet_address);
            builder wallet_builder = begin_cell().store_slice(wallet_address);
            storage::auto_claim_wallets~udict_set_ref(256, wallet_hash, wallet_builder.end_cell());
        }

        ;; Increment total wallet count
        storage::total_wallet_count += 1;
        
        save_data();
        return ();
    }
    
    ;; update_recipient - update the recipient of a vesting wallet (from vesting wallet contract)
    if (op == op::update_recipient) {
        cell log_data1 = in_msg_body~load_ref();
        slice log_data1_cs = log_data1.begin_parse();
            
        slice wallet_address = log_data1_cs~load_msg_addr();
        slice old_receiver = log_data1_cs~load_msg_addr();
            
        cell log_data2 = in_msg_body~load_ref();
        slice log_data2_cs = log_data2.begin_parse();
            
        slice new_receiver = log_data2_cs~load_msg_addr();
        slice owner_address = log_data2_cs~load_msg_addr();
            
        ;; Remove wallet from old receiver's list
        storage::receiver_wallets = remove_from_index(storage::receiver_wallets, old_receiver, wallet_address);
            
        ;; Add wallet to new receiver's list
        storage::receiver_wallets = add_to_index(storage::receiver_wallets, new_receiver, wallet_address);
    
        save_data();
        return ();
    }
    
    ;; update_owner - update the owner of a vesting wallet (from vesting wallet contract)
    if (op == op::update_owner) {
        cell log_data1 = in_msg_body~load_ref();
        slice log_data1_cs = log_data1.begin_parse();
            
        slice wallet_address = log_data1_cs~load_msg_addr();
        slice old_owner = log_data1_cs~load_msg_addr();
            
        cell log_data2 = in_msg_body~load_ref();
        slice log_data2_cs = log_data2.begin_parse();
            
        slice new_owner = log_data2_cs~load_msg_addr();
            
        ;; Remove wallet from old owner's list
        storage::owner_wallets = remove_from_index(storage::owner_wallets, old_owner, wallet_address);
            
        ;; Add wallet to new owner's list
        storage::owner_wallets = add_to_index(storage::owner_wallets, new_owner, wallet_address);
            
        save_data();
        
        return ();
    }
    
    ;; update_owner_address - set the owner of the logger contract (only owner)
    if (op == op::update_owner_address) {
        if (equal_slices(sender_addr, storage::owner)) {
            slice new_owner = in_msg_body~load_msg_addr();
            storage::owner = new_owner;
            save_data();
        }
        return ();
    }

    ;; set_max_wallets - set the max number of wallets (only owner)
    if (op == op::set_max_wallets) {
        throw_unless(error::access_denied, equal_slices(sender_addr, storage::owner));
    
        int new_max_wallets = in_msg_body~load_uint(32);
        ;; check if new max wallets is greater than total wallets
        throw_unless(error::invalid_value, new_max_wallets >= storage::total_wallet_count);
    
        storage::max_wallet_count = new_max_wallets;
        save_data();
        return ();
    }
    
    throw_unless(error::access_denied, equal_slices(sender_addr, storage::owner));
}


;; GET METHODS

;; Get all wallets for a token
cell get_token_wallets(slice token_address) method_id {
    load_data();
    
    ;; If logger is not initialized, return empty dict
    if (~ storage::init?) {
        return new_dict();
    }
    
    ;; Parse token address
    (int token_wc, int token_hash) = parse_std_addr(token_address);
    
    ;; Get token wallets
    (slice token_list_slice, int token_found) = storage::token_wallets.udict_get?(256, token_hash);
    
    ;; If token not found, return empty dict
    if (~ token_found) {
        return new_dict();
    }
    
    ;; Return token wallets
    return token_list_slice.preload_ref();
}

;; Get all wallets for an owner
cell get_owner_wallets(slice owner_address) method_id {
    load_data();
    
    ;; If logger is not initialized, return empty dict
    if (~ storage::init?) {
        return new_dict();
    }
    
    ;; Parse owner address
    (int owner_wc, int owner_hash) = parse_std_addr(owner_address);
    
    ;; Get owner wallets
    (slice owner_list_slice, int owner_found) = storage::owner_wallets.udict_get?(256, owner_hash);
    
    ;; If owner not found, return empty dict
    if (~ owner_found) {
        return new_dict();
    }
    
    ;; Return owner wallets
    return owner_list_slice.preload_ref();
}

;; Get all wallets for a receiver
cell get_receiver_wallets(slice receiver_address) method_id {
    load_data();

    ;; If logger is not initialized, return empty dict
    if (~ storage::init?) {
        return new_dict();
    }

    ;; Parse receiver address
    (int receiver_wc, int receiver_hash) = parse_std_addr(receiver_address);

    ;; Get receiver wallets
    (slice receiver_list_slice, int receiver_found) = storage::receiver_wallets.udict_get?(256, receiver_hash);
    
    ;; If receiver not found, return empty dict
    if (~ receiver_found) {
        return new_dict();
    }

    ;; Return receiver wallets
    return receiver_list_slice.preload_ref();
}

;; Get all wallets with auto claim enabled
cell get_auto_claim_wallets() method_id {
    load_data();
    
    ;; If logger is not initialized, return empty dict
    if (~ storage::init?) {
        return new_dict();
    }
    
    ;; Return auto claim wallets
    return storage::auto_claim_wallets;
}

;; Get logger owner
slice get_owner() method_id {
    load_data();
    return storage::owner;
}

;; Get total wallet count
int get_total_wallet_count() method_id {
    load_data();
    return storage::total_wallet_count;
}

;; Get max wallet count
int get_max_wallet_count() method_id {
    load_data();
    return storage::max_wallet_count;
}