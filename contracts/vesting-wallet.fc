#include "imports/stdlib.fc";
#include "imports/utils.fc";

{-
  Storage
  storage#_ owner_address:MsgAddressInt recipient_address:MsgAddressInt jetton_master_address:MsgAddressInt 
             vesting_total_amount:Coins vesting_params:uint128 is_auto_claim:Bool cancel_permission:uint3
             change_recipient_permission:uint3 claimed_amount:Coins seqno:uint32 logger_address:MsgAddressInt
             vesting_master_address:MsgAddressInt splits_count:uint8 max_splits:uint8 = Storage;
  
  vesting_params#_ vesting_start_time:uint32 vesting_total_duration:uint32 unlock_period:uint32 
                   cliff_duration:uint32 = VestingParams;
-}

(slice, slice, slice, int, int, int, int, int, int, int, int, int, int, slice, slice, int, int) load_data() inline {
    var ds = get_data().begin_parse();
    ;; if ds is empty, return default values
    if (ds.slice_empty?()) {
        return (null(), null(), null(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, null(), null(), 0, 5);
    }

    cell cell1 = ds~load_ref();
    slice data1 = cell1.begin_parse();
    slice owner_address = data1~load_msg_addr();
    
    cell cell2 = ds~load_ref();
    slice data2 = cell2.begin_parse();
    slice recipient_address = data2~load_msg_addr();
    slice jetton_master_address = data2~load_msg_addr();
    
    cell cell3 = ds~load_ref();
    slice data3 = cell3.begin_parse();
    int vesting_total_amount = data3~load_coins();
    int packed_params = data3~load_uint(128);
    int is_auto_claim = data3~load_uint(1);
    int cancel_contract_permission = data3~load_uint(3);
    int change_recipient_permission = data3~load_uint(3);
    
    cell cell4 = ds~load_ref();
    slice data4 = cell4.begin_parse();
    int claimed_amount = data4~load_coins();
    int seqno = data4~load_uint(32);
    slice logger_address = data4~load_msg_addr();
    slice vesting_master_address = data4~load_msg_addr();
    int splits_count = data4~load_uint(8);
    int max_splits = data4~load_uint(8);
    
    (int vesting_start_time, int vesting_total_duration, int unlock_period, int cliff_duration) = unpack_vesting_params(packed_params);

    return (
        owner_address,
        recipient_address,
        jetton_master_address,
        vesting_total_amount,
        vesting_start_time,
        vesting_total_duration,
        unlock_period,
        cliff_duration,
        is_auto_claim,
        cancel_contract_permission,
        change_recipient_permission,
        claimed_amount,
        seqno,
        logger_address,
        vesting_master_address,
        splits_count,
        max_splits
    );
}

() save_data(slice owner_address, slice recipient_address, slice jetton_master_address,
    int vesting_total_amount,
    int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, 
    int is_auto_claim, int cancel_contract_permission, int change_recipient_permission,
    int claimed_amount, int seqno, slice logger_address, slice vesting_master_address, 
    int splits_count, int max_splits) impure inline {
    
    int packed_params = (vesting_start_time << 96) | 
    (vesting_total_duration << 64) | 
    (unlock_period << 32) | 
                       cliff_duration;

    ;; Create cell1 (256 bits)
    cell cell1 = begin_cell()
        .store_slice(owner_address) ;; owner address (256 bits)
        .end_cell();
    
    ;; Create cell2 (256 + 256 = 512 bits)
    cell cell2 = begin_cell()
        .store_slice(recipient_address) ;; recipient address (256 bits)
        .store_slice(jetton_master_address) ;; jetton master address (256 bits)
        .end_cell();
    
    ;; Create cell3 (128 + 1 + 3 + 3 = 135 bits)
    cell cell3 = begin_cell()
        .store_coins(vesting_total_amount) ;; vesting total amount (128 bits)
        .store_uint(packed_params, 128) ;; packed params (128 bits)
        .store_uint(is_auto_claim, 1) ;; is auto claim (1 bit)
        .store_uint(cancel_contract_permission, 3) ;; cancel contract permission (3 bits)
        .store_uint(change_recipient_permission, 3) ;; change recipient permission (3 bits)
        .end_cell();

    ;; Create cell4 (128 + 32 + 256 + 256 + 8 + 8 = 736 bits)   
    cell cell4 = begin_cell()
        .store_coins(claimed_amount) ;; claimed amount (128 bits)
        .store_uint(seqno, 32) ;; seqno (32 bits)
        .store_slice(logger_address) ;; logger address (256 bits)
        .store_slice(vesting_master_address) ;; vesting master address (256 bits)
        .store_uint(splits_count, 8) ;; splits count (8 bits)
        .store_uint(max_splits, 8) ;; max splits (8 bits)
        .end_cell();
    
    ;; Save data cell (up to 4 references)
    set_data(
        begin_cell()
        .store_ref(cell1)
        .store_ref(cell2)
        .store_ref(cell3)
        .store_ref(cell4)
        .end_cell()
    );
}

;; Check permission for sender address
int check_permission(slice sender_addr, slice owner_address, slice recipient_address, int permission_type) inline {
    ;; only owner
    if (permission_type == permission::only_owner) {
        return equal_slices(sender_addr, owner_address);
    } 
    ;; only recipient
    if (permission_type == permission::only_recipient) {
        return equal_slices(sender_addr, recipient_address);
    }
    ;; both
    if (permission_type == permission::both) {
        return equal_slices(sender_addr, owner_address) | equal_slices(sender_addr, recipient_address);
    }
    return 0; ;; permission::neither
}

;; Calculate unlocked amount at a specific time
int calculate_unlocked_amount(int vesting_total_amount, int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, int at_time) inline {
    if (at_time < vesting_start_time) {
        return 0;
    }
  
    int time_passed = at_time - vesting_start_time;
  
    if (time_passed < cliff_duration) {
        return 0;
    }
  
    int unlock_intervals = vesting_total_duration / unlock_period;
    
    ;; If the total vesting duration has passed, return the full amount
    if (time_passed >= vesting_total_duration) {
        return vesting_total_amount;
    }
    
    int intervals_passed = (time_passed - cliff_duration) / unlock_period;
    
    ;; Last period check (last period gets all remaining tokens)
    if (intervals_passed == unlock_intervals - 1) {
        ;; Standard calculation except for the last period
        int base_per_interval = vesting_total_amount / unlock_intervals;
        int previous_periods_amount = base_per_interval * (unlock_intervals - 1);
        
        ;; Last period: Subtract the sum of previous periods from the total amount = remaining tokens
        return previous_periods_amount + (vesting_total_amount - previous_periods_amount);
    }
    
    ;; Standard calculation for normal periods
    int amount_per_interval = vesting_total_amount / unlock_intervals;
    int unlocked_amount = intervals_passed * amount_per_interval;
    
    return unlocked_amount;
}

;; Calculate locked amount at a specific time
int calculate_locked_amount(int vesting_total_amount, int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, int at_time) inline {
    int unlocked = calculate_unlocked_amount(vesting_total_amount, vesting_start_time, 
        vesting_total_duration, unlock_period, cliff_duration, at_time);
    return vesting_total_amount - unlocked;
}

;; Send logger message
() send_logger_message(slice logger_address, int op, int query_id, slice data_slice1, slice data_slice2) impure inline {
    var log_msg = begin_cell()
        .store_uint(BOUNCEABLE, 6)
        .store_slice(logger_address)
        .store_coins(gas::logger_message)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);
    
    cell log_data1 = begin_cell()
        .store_slice(data_slice1)
        .end_cell();
        
    cell log_data2 = begin_cell()
        .store_slice(data_slice2)
        .end_cell();
        
    log_msg = log_msg.store_ref(log_data1).store_ref(log_data2);
    
    send_raw_message(log_msg.end_cell(), send_mode::pay_gas_separately);
}

;; Calculate vesting contract state init
cell calculate_vesting_state_init(
    slice owner_address, slice recipient_address, slice jetton_master_address,
    int vesting_total_amount, int vesting_start_time, int vesting_total_duration, 
    int unlock_period, int cliff_duration, int is_auto_claim, 
    int cancel_contract_permission, int change_recipient_permission,
    int claimed_amount, int seqno, slice logger_address, slice vesting_master_address,
    int splits_count, int max_splits
) inline {
    ;; Pack the initial data
    int packed_params = (vesting_start_time << 96) | 
    (vesting_total_duration << 64) | 
    (unlock_period << 32) | 
                       cliff_duration;

    cell cell1 = begin_cell()
        .store_slice(owner_address)
        .end_cell();
    
    cell cell2 = begin_cell()
        .store_slice(recipient_address)
        .store_slice(jetton_master_address)
        .end_cell();
    
    cell cell3 = begin_cell()
        .store_coins(vesting_total_amount)
        .store_uint(packed_params, 128)
        .store_uint(is_auto_claim, 1)
        .store_uint(cancel_contract_permission, 3)
        .store_uint(change_recipient_permission, 3)
        .end_cell();
    
    cell cell4 = begin_cell()
        .store_coins(claimed_amount)
        .store_uint(seqno, 32)
        .store_slice(logger_address)
        .store_slice(vesting_master_address)
        .store_uint(splits_count, 8)
        .store_uint(max_splits, 8)
        .end_cell();
    
    cell data = begin_cell()
        .store_ref(cell1)
        .store_ref(cell2)
        .store_ref(cell3)
        .store_ref(cell4)
        .end_cell();
    
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(my_code())
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

;; Calculate contract address from state init
slice calculate_contract_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(0, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

() recv_external(slice in_msg) impure {
    int msg_seqno = in_msg~load_uint(32);
    int valid_until = in_msg~load_uint(32);
    
    var (owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
        vesting_start_time, vesting_total_duration, unlock_period, cliff_duration, 
        is_auto_claim, cancel_contract_permission, change_recipient_permission, 
        claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits) = load_data();
    
    ;; Check if the message sequence number is valid
    throw_unless(error::invalid_seqno, msg_seqno == seqno);
    
    ;; Check if the message is valid until the current time
    throw_if(error::invalid_valid_until, valid_until <= now());
    
    accept_message();
    
    ;; Check if the operation is valid
    int op = in_msg~load_uint(32);
    throw_unless(error::invalid_op, op == op::claim_unlocked);
    
    ;; Get query ID
    int query_id = in_msg~load_uint(64);
    
    ;; Get forward TON amount
    int forward_ton_amount = in_msg~load_coins();
    slice jetton_wallet_address = in_msg~load_msg_addr();

    ;; Calculate unlocked amount
    int unlocked_amount = calculate_unlocked_amount(vesting_total_amount, vesting_start_time, 
        vesting_total_duration, unlock_period, cliff_duration, now());

    ;; Calculate claimable amount
    int claimable_amount = unlocked_amount - claimed_amount;

    throw_unless(error::invalid_amount, claimable_amount > 0);

    ;; Create transfer message body
    var msg_body = begin_cell()
        .store_uint(op::transfer, 32)
        .store_uint(query_id, 64)
        .store_coins(claimable_amount)
        .store_slice(recipient_address)
        .store_slice(recipient_address)
        .store_uint(0, 1)
        .store_coins(forward_ton_amount)
        .store_uint(0, 1)
        .end_cell();

    ;; Create transfer message
    var msg = begin_cell()
        .store_uint(BOUNCEABLE, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(forward_ton_amount + gas::jetton_transfer_wallet)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);

    claimed_amount += claimable_amount;
    seqno += 1;

    save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
        vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
        is_auto_claim, cancel_contract_permission, change_recipient_permission,
        claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return (); ;; Accept TON transfers
    }
  
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
  
    if (flags & 1) {
        return (); ;; Ignore bounced messages
    }
  
    slice sender_addr = cs~load_msg_addr();
  
    var (owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
        vesting_start_time, vesting_total_duration, unlock_period, cliff_duration, 
        is_auto_claim, cancel_contract_permission, change_recipient_permission, 
        claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits) = load_data();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    ;; Handle transfer notification
    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
    
        ;; Check if transfer is from vesting master
        if(equal_slices(from_address, vesting_master_address)) {
            ;; don't increment vesting amount if transfer is from vesting master,
            ;; because it's already included in the vesting amount with state_init
            return();
        }

        ;; Add vesting amount
        if(equal_slices(from_address, owner_address)) {
            vesting_total_amount += jetton_amount;
            
            save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
                vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
                is_auto_claim, cancel_contract_permission, change_recipient_permission,
                claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        }
       
        return ();
    }

    ;; Relock (extend vesting duration)
    if (op == op::relock) {
        ;; Check permission - only owner can relock
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        
        int new_duration = in_msg_body~load_uint(32);
        vesting_total_duration += new_duration;
        
        save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
            is_auto_claim, cancel_contract_permission, change_recipient_permission,
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
            
        return();
    }

    ;; Split vesting
    if (op == op::split_vesting) {
        ;; Check permission - only owner or recipient can split
        throw_unless(error::access_denied, 
            check_permission(sender_addr, owner_address, recipient_address, permission::both));
        
        ;; Parse parameters
        int split_amount = in_msg_body~load_coins();
        slice new_owner_address = in_msg_body~load_msg_addr();
        slice new_recipient_address = in_msg_body~load_msg_addr();
        int forward_ton_amount = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();
        
        int remaining_amount = vesting_total_amount - claimed_amount;
        
        ;; Check if the split amount is valid and above minimum threshold
        throw_unless(error::invalid_amount, (split_amount >= vesting::min_split_amount) & (split_amount < remaining_amount));
        
        ;; Check if maximum splits limit has been reached
        throw_unless(error::max_splits_reached, splits_count < max_splits);
        
        ;; Calculate new vesting parameters for both contracts
        ;; Original contract will have reduced amount
        int new_total_amount = vesting_total_amount - split_amount;
        
        ;; Create state init for new vesting contract
        cell state_init = calculate_vesting_state_init(
            new_owner_address,
            new_recipient_address,
            jetton_master_address,
            split_amount,
            vesting_start_time,
            vesting_total_duration,
            unlock_period,
            cliff_duration,
            is_auto_claim,
            cancel_contract_permission,
            change_recipient_permission,
            0, ;; claimed amount starts at 0
            0, ;; seqno starts at 0
            logger_address,
            my_address(), ;; current wallet as master for new vesting
            splits_count + 1,  ;; splits
            max_splits ;; max_splits
        );
        
        ;; Calculate new contract address
        slice new_contract_address = calculate_contract_address(state_init);
        
        ;; First deploy the new vesting wallet contract
        var deploy_msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(new_contract_address)
            .store_coins(gas::deploy_vesting_wallet)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(begin_cell().end_cell());
        
        send_raw_message(deploy_msg.end_cell(), send_mode::pay_gas_separately);
        
        ;; Then transfer tokens to the new vesting contract
        var transfer_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(split_amount)
            .store_slice(new_contract_address)
            .store_slice(sender_addr)
            .store_uint(0, 1)
            .store_coins(forward_ton_amount)
            .store_uint(0, 1)
            .end_cell();
            
        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(forward_ton_amount + gas::jetton_transfer_wallet)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(transfer_body);
        
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        
        ;; Logger for the new vesting wallet
        if ((~ null?(logger_address)) & (logger_address.preload_uint(2) != 0)) {
            var log_msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(logger_address)
            .store_coins(gas::logger_message)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::register_wallet, 32)
            .store_uint(query_id, 64);
            
            cell log_data = begin_cell()
                .store_slice(new_contract_address)
                .store_slice(jetton_master_address)
                .end_cell();
                
            cell log_data2 = begin_cell()
                .store_slice(new_owner_address)
                .store_slice(new_recipient_address)
                .store_uint(is_auto_claim, 1)
                .end_cell();
                
            log_msg = log_msg.store_ref(log_data).store_ref(log_data2);
            
            send_raw_message(log_msg.end_cell(), send_mode::pay_gas_separately);
        }
        
        ;; Update the current contract with reduced amount and increment splits count
        vesting_total_amount = new_total_amount;
        splits_count += 1;
        
        save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
            is_auto_claim, cancel_contract_permission, change_recipient_permission,
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        
        return ();
    }

    ;; Cancel vesting operation
    if (op == op::cancel_vesting) {
        ;; Check permission - only owner or recipient or both can cancel
        throw_unless(error::access_denied, check_permission(sender_addr, owner_address, recipient_address, cancel_contract_permission));
        
        int forward_ton_amount = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();

        int remaining_amount = vesting_total_amount - claimed_amount;
        
        ;; Send all remaining tokens to return_address
        if (remaining_amount > 0) {
            var msg_body = begin_cell()
                .store_uint(op::transfer, 32)
                .store_uint(query_id, 64)
                .store_coins(remaining_amount)
                .store_slice(sender_addr)
                .store_slice(sender_addr)
                .store_uint(0, 1)
                .store_coins(forward_ton_amount) 
                .store_uint(0, 1)
                .end_cell();
                
            var msg = begin_cell()
                .store_uint(BOUNCEABLE, 6)
                .store_slice(jetton_wallet_address)
                .store_coins(forward_ton_amount + gas::jetton_transfer_wallet)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);
            
            send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);
        }
        
        ;; Update contract state - set vesting_total_amount to claimed_amount to mark as fully claimed
        save_data(owner_address, recipient_address, jetton_master_address, claimed_amount,
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration, 
            is_auto_claim, cancel_contract_permission, change_recipient_permission, 
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        
        return ();
    }

    ;; Change recipient
    if (op == op::change_recipient) {
        ;; Check permission - only owner or recipient or both can change recipient
        throw_unless(error::access_denied, 
            check_permission(sender_addr, owner_address, recipient_address, change_recipient_permission));
        
        slice new_recipient_address = in_msg_body~load_msg_addr();
        
        if (~ null?(logger_address)) {
            var my_address = my_address();
            
            slice data_slice1 = begin_cell()
                .store_slice(my_address)
                .store_slice(recipient_address)
                .end_cell()
                .begin_parse();
                
            slice data_slice2 = begin_cell()
                .store_slice(new_recipient_address)
                .store_slice(owner_address)
                .end_cell()
                .begin_parse();
                
            send_logger_message(logger_address, op::update_recipient, query_id, data_slice1, data_slice2);
        }
        
        save_data(owner_address, new_recipient_address, jetton_master_address, vesting_total_amount,
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration, 
            is_auto_claim, cancel_contract_permission, change_recipient_permission, 
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        
        return ();
    }

    ;; Claim unlocked
    if (op == op::claim_unlocked) {
        throw_unless(error::access_denied, equal_slices(sender_addr, recipient_address));
        
        int forward_ton_amount = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();

        int unlocked_amount = calculate_unlocked_amount(vesting_total_amount, vesting_start_time, 
            vesting_total_duration, unlock_period, cliff_duration, now());

        int claimable_amount = unlocked_amount - claimed_amount;

        throw_unless(error::invalid_amount, claimable_amount > 0);

        var msg_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(claimable_amount)
            .store_slice(recipient_address)
            .store_slice(sender_addr)
            .store_uint(0, 1)
            .store_coins(forward_ton_amount)
            .store_uint(0, 1)
            .end_cell();
            
        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(forward_ton_amount + gas::jetton_transfer_wallet)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);

        claimed_amount += claimable_amount;

        save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
            is_auto_claim, cancel_contract_permission, change_recipient_permission,
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        return ();
    }

    ;; Update max splits
    if (op == op::update_max_splits) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        
        int new_max_splits = in_msg_body~load_uint(32);
        throw_unless(error::invalid_amount, new_max_splits <= 15); ;; 15 is the maximum number of splits (random number)

        max_splits = max(max_splits, new_max_splits);

        save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount,
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
            is_auto_claim, cancel_contract_permission, change_recipient_permission,
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        
        return ();
            
    }

    ;; Withdraw jettons
    if (op == op::withdraw_jettons) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
    
        slice to_addr = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        int forward_ton_amount = in_msg_body~load_coins();
        slice jetton_wallet_address = in_msg_body~load_msg_addr();

        throw_unless(error::access_denied, equal_slices(to_addr, owner_address));
    
        var msg_body = begin_cell()
            .store_uint(op::transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(to_addr)
            .store_slice(sender_addr)
            .store_uint(0, 1)
            .store_coins(forward_ton_amount)
            .store_uint(0, 1)
            .end_cell();
            
        var msg = begin_cell()
            .store_uint(BOUNCEABLE, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(forward_ton_amount + gas::jetton_transfer_wallet)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);
        
        send_raw_message(msg.end_cell(), send_mode::pay_gas_separately);

        claimed_amount = vesting_total_amount;
        
        save_data(owner_address, recipient_address, jetton_master_address, vesting_total_amount, 
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration,
            is_auto_claim, cancel_contract_permission, change_recipient_permission,
            claimed_amount, seqno, logger_address,vesting_master_address, splits_count, max_splits);

        return ();
    }
    
    ;; Update owner
    if (op == op::update_owner) {
        throw_unless(error::access_denied, equal_slices(sender_addr, owner_address));
        
        slice new_owner_address = in_msg_body~load_msg_addr();
        
        if (~ null?(logger_address)) {
            var my_address = my_address();
            
            slice data_slice1 = begin_cell()
                .store_slice(my_address)
                .store_slice(owner_address)
                .end_cell()
                .begin_parse();
                
            slice data_slice2 = begin_cell()
                .store_slice(new_owner_address)
                .store_slice(recipient_address)
                .end_cell()
                .begin_parse();
                
            send_logger_message(logger_address, op::update_owner, query_id, data_slice1, data_slice2);
        }
        
        save_data(new_owner_address, recipient_address, jetton_master_address, vesting_total_amount,
            vesting_start_time, vesting_total_duration, unlock_period, cliff_duration, 
            is_auto_claim, cancel_contract_permission, change_recipient_permission, 
            claimed_amount, seqno, logger_address, vesting_master_address, splits_count, max_splits);
        
        return ();
    }
  
    throw(error::invalid_op);
}

;; Get Methods

;; Get vesting parameters
(slice, slice, slice, int, int, int, int, int, int, int, int, int, int, slice, slice, int, int) get_vesting_data() method_id {
    return load_data();
}

;; Get owner address
slice get_owner() method_id {
    var (owner_address, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return owner_address;
}

;; Get recipient address
slice get_recipient() method_id {
    var (_, recipient_address, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return recipient_address;
}

;; Get cancel permission
int get_cancel_contract_permission() method_id {
    var (_, _, _, _, _, _, _, _, _, cancel_contract_permission, _, _, _, _, _, _, _) = load_data();
    return cancel_contract_permission;
}

;; Get change recipient permission
int get_change_recipient_permission() method_id {
    var (_, _, _, _, _, _, _, _, _, _, change_recipient_permission, _, _, _, _, _, _) = load_data();
    return change_recipient_permission;
}

;; Get auto claim flag
int get_is_auto_claim() method_id {
    var (_, _, _, _, _, _, _, _, is_auto_claim, _, _, _, _, _, _, _, _) = load_data();
    return is_auto_claim;
}

;; Get logger address
slice get_logger_address() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, _, logger_address, _, _, _) = load_data();
    return logger_address;
}

;; Check if a specific address can cancel the contract
int can_cancel_contract(slice address) method_id {
    var (owner_address, recipient_address, _, _, _, _, _, _, _, cancel_contract_permission, _, _, _, _, _, _, _) = load_data();
    return check_permission(address, owner_address, recipient_address, cancel_contract_permission);
}

;; Check if a specific address can change the recipient
int can_change_recipient(slice address) method_id {
    var (owner_address, recipient_address, _, _, _, _, _, _, _, _, change_recipient_permission, _, _, _, _, _, _) = load_data();
    return check_permission(address, owner_address, recipient_address, change_recipient_permission);
}

;; Get locked amount at a specific time
int get_locked_amount(int at_time) method_id {
    var (_, _, _, vesting_total_amount, vesting_start_time, vesting_total_duration, 
        unlock_period, cliff_duration, _, _, _, _, _, _, _, _, _) = load_data();
  
    return calculate_locked_amount(vesting_total_amount, vesting_start_time, 
        vesting_total_duration, unlock_period, cliff_duration, at_time);
}

;; Get unlocked amount at a specific time
int get_unlocked_amount(int at_time) method_id {
    var (_, _, _, vesting_total_amount, vesting_start_time, vesting_total_duration, 
        unlock_period, cliff_duration, _, _, _, _, _, _, _, _, _) = load_data();
  
    return calculate_unlocked_amount(vesting_total_amount, vesting_start_time, 
        vesting_total_duration, unlock_period, cliff_duration, at_time);
}

;; Get current locked amount
int get_current_locked_amount() method_id {
    return get_locked_amount(now());
}

;; Get current unlocked amount
int get_current_unlocked_amount() method_id {
    return get_unlocked_amount(now());
}

;; Get claimed amount
int get_claimed_amount() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, claimed_amount, _, _, _, _, _) = load_data();
    return claimed_amount;
}

;; Get claimable amount
int get_claimable_amount() method_id {
    var (_, _, _, vesting_total_amount, vesting_start_time, vesting_total_duration, 
        unlock_period, cliff_duration, _, _, _, claimed_amount, _, _, _, _, _) = load_data();
    
    int unlocked_amount = calculate_unlocked_amount(vesting_total_amount, vesting_start_time, 
        vesting_total_duration, unlock_period, cliff_duration, now());
    
    return unlocked_amount - claimed_amount;
}

;; Get vesting total amount directly
int get_vesting_total_amount() method_id {
    var (_, _, _, vesting_total_amount, _, _, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return vesting_total_amount;
}

;; Get seqno
int get_seqno() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, seqno, _, _, _, _) = load_data();
    return seqno;
}

;; Get remaining amount (total - claimed)
int get_remaining_amount() method_id {
    var (_, _, _, vesting_total_amount, _, _, _, _, _, _, _, claimed_amount, _, _, _, _, _) = load_data();
    return vesting_total_amount - claimed_amount;
}

;; Get vesting start time
int get_vesting_start_time() method_id {
    var (_, _, _, _, vesting_start_time, _, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return vesting_start_time;
}

;; Get vesting total duration
int get_vesting_total_duration() method_id {
    var (_, _, _, _, _, vesting_total_duration, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return vesting_total_duration;
}

;; Get unlock period
int get_unlock_period() method_id {
    var (_, _, _, _, _, _, unlock_period, _, _, _, _, _, _, _, _, _, _) = load_data();
    return unlock_period;
}

;; Get cliff duration
int get_cliff_duration() method_id {
    var (_, _, _, _, _, _, _, cliff_duration, _, _, _, _, _, _, _, _, _) = load_data();
    return cliff_duration;
}

;; Get vesting master address
slice get_vesting_master_address() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, _, _, vesting_master_address, _, _) = load_data();
    return vesting_master_address;
}

;; Get jetton master address
slice get_jetton_master_address() method_id {
    var (_, _, jetton_master_address, _, _, _, _, _, _, _, _, _, _, _, _, _, _) = load_data();
    return jetton_master_address;
}

;; Get splits count
int get_splits_count() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, splits_count, _) = load_data();
    return splits_count;
}

;; Get max splits
int get_max_splits() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, max_splits) = load_data();
    return max_splits;
}

;; Check if more splits are allowed
int can_split_more() method_id {
    var (_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, splits_count, max_splits) = load_data();
    return splits_count < max_splits;
}

;; Get minimum split amount
int get_min_split_amount() method_id {
    return vesting::min_split_amount;
}
